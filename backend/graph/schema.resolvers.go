package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"backend/internal/entity"
	"context"
	"fmt"
)

// CreateCircuit is the resolver for the createCircuit field.
func (r *mutationResolver) CreateCircuit(ctx context.Context, title string) (*entity.Circuit, error) {
	return r.CircuitService.CreateCircuit(title)
}

// CreateInputNode is the resolver for the createInputNode field.
func (r *mutationResolver) CreateInputNode(ctx context.Context, circuitID string, title *string) (*entity.InputNode, error) {
	titleStr := ""
	if title != nil {
		titleStr = *title
	}
	return r.CircuitService.CreateInputNode(circuitID, titleStr)
}

// CreateOutputNode is the resolver for the createOutputNode field.
func (r *mutationResolver) CreateOutputNode(ctx context.Context, circuitID string, title *string) (*entity.OutputNode, error) {
	titleStr := ""
	if title != nil {
		titleStr = *title
	}
	return r.CircuitService.CreateOutputNode(circuitID, titleStr)
}

// CreateAndNode is the resolver for the createAndNode field.
func (r *mutationResolver) CreateAndNode(ctx context.Context, circuitID string) (*entity.AndNode, error) {
	return r.CircuitService.CreateAndNode(circuitID)
}

// CreateOrNode is the resolver for the createOrNode field.
func (r *mutationResolver) CreateOrNode(ctx context.Context, circuitID string) (*entity.OrNode, error) {
	return r.CircuitService.CreateOrNode(circuitID)
}

// CreateNotNode is the resolver for the createNotNode field.
func (r *mutationResolver) CreateNotNode(ctx context.Context, circuitID string) (*entity.NotNode, error) {
	return r.CircuitService.CreateNotNode(circuitID)
}

// CreateCircuitNode is the resolver for the createCircuitNode field.
func (r *mutationResolver) CreateCircuitNode(ctx context.Context, circuitID string, referencedCircuitID string) (*entity.CircuitNode, error) {
	return r.CircuitService.CreateCircuitNode(circuitID, referencedCircuitID)
}

// CreateEdge is the resolver for the createEdge field.
func (r *mutationResolver) CreateEdge(ctx context.Context, circuitID string, sourceNodeID string, targetNodeID string) (*entity.Edge, error) {
	return r.CircuitService.CreateEdge(circuitID, sourceNodeID, targetNodeID)
}

// Circuits is the resolver for the circuits field.
func (r *queryResolver) Circuits(ctx context.Context) ([]*entity.Circuit, error) {
	return r.CircuitService.GetAllCircuits()
}

// Circuit is the resolver for the circuit field.
func (r *queryResolver) Circuit(ctx context.Context, id string) (*entity.Circuit, error) {
	return r.CircuitService.GetCircuit(id)
}

// EvaluateCircuit is the resolver for the evaluateCircuit field.
func (r *queryResolver) EvaluateCircuit(ctx context.Context, circuitID string, inputs []*entity.InputNodeValue) (*entity.EvaluationResult, error) {
	circuit, err := r.CircuitService.GetCircuit(circuitID)
	if err != nil {
		return nil, fmt.Errorf("failed to get circuit: %w", err)
	}
	return r.CircuitService.EvaluateCircuit(circuit, inputs)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *circuitResolver) Title(ctx context.Context, obj *entity.Circuit) (string, error) {
	panic(fmt.Errorf("not implemented: Title - title"))
}
func (r *Resolver) Circuit() CircuitResolver { return &circuitResolver{r} }
type circuitResolver struct{ *Resolver }
*/
